theme_classic() + theme(legend.position = "none")
# theme(legend.text = element_text(size = 8), legend.title = element_text(size = 9), plot.title = element_text(hjust = 0.5, face = "bold"))
if (!is.null(purity)) {
expected_vafs <- .expectedClVAF(CN = as.numeric(cn), purity = purity)
p_clonality <- p_clonality + geom_vline(xintercept = expected_vafs, linetype = "dashed", color = "black")
}
clonality_plots[[paste0(cn, "_", b)]] <- p_clonality
}
}
clonality_plots <- list()
for (cn in names(snvClonality_split_TCN)) {
snvClonality_split_TCN_B <- split(snvClonality_split_TCN[[cn]], snvClonality_split_TCN[[cn]]$B)
for (b in names(snvClonality_split_TCN_B)) {
tcn <- snvClonality_split_TCN_B[[b]]
tcn$Clonality <- factor(tcn$Clonality, levels = c("Precnv", "Postcnv", "C", "SC"))
if (nrow(tcn) == 0) next
max_count <- max(hist(tcn$t_vaf, breaks = nb.breaks, plot = FALSE)$counts)
p_clonality <- ggplot(tcn, aes(x = t_vaf, fill = Clonality)) +
geom_histogram(bins = nb.breaks, color = NA, position = "stack", show.legend = T) +
scale_fill_manual(values = clonality_colors, labels = c("Precnv" = "Clonal\n- Pre-CNV", "Postcnv" = "Clonal\n- Post-CNV", "C" = "Clonal\n- NOS", "SC" = "Subclonal")) +
scale_x_continuous(breaks = seq(0, 1, 0.2), limits = c(0, 1)) +
labs(x = "VAF", y = "No. of SNVs", title = paste0("CN:", cn, " (", as.numeric(cn) - as.numeric(b), ":", b, ")")) +
theme_classic() + theme(legend.position = "none")
# theme(legend.text = element_text(size = 8), legend.title = element_text(size = 9), plot.title = element_text(hjust = 0.5, face = "bold"))
if (!is.null(purity)) {
expected_vafs <- LACHESIS:::.expectedClVAF(CN = as.numeric(cn), purity = purity)
p_clonality <- p_clonality + geom_vline(xintercept = expected_vafs, linetype = "dashed", color = "black")
}
clonality_plots[[paste0(cn, "_", b)]] <- p_clonality
}
}
clonality_plots[[1]]
clonality_plots <- list()
for (cn in names(snvClonality_split_TCN)) {
snvClonality_split_TCN_B <- split(snvClonality_split_TCN[[cn]], snvClonality_split_TCN[[cn]]$B)
for (b in names(snvClonality_split_TCN_B)) {
tcn <- snvClonality_split_TCN_B[[b]]
tcn$Clonality <- factor(tcn$Clonality, levels = c("Precnv", "Postcnv", "C", "SC"))
if (nrow(tcn) == 0) next
max_count <- max(hist(tcn$t_vaf, breaks = nb.breaks, plot = FALSE)$counts)
p_clonality <- ggplot(tcn, aes(x = t_vaf, fill = Clonality)) +
geom_histogram(bins = nb.breaks, color = NA, position = "stack", show.legend = T) +
scale_fill_manual(values = clonality_colors, labels = c("Precnv" = "Clonal\n- Pre-CNV", "Postcnv" = "Clonal\n- Post-CNV", "C" = "Clonal\n- NOS", "SC" = "Subclonal")) +
scale_x_continuous(breaks = seq(0, 1, 0.2), limits = c(0, 1)) +
labs(x = "VAF", y = "No. of SNVs", title = paste0("CN:", cn, " (", as.numeric(cn) - as.numeric(b), ":", b, ")")) +
theme_classic() #+ theme(legend.position = "none")
# theme(legend.text = element_text(size = 8), legend.title = element_text(size = 9), plot.title = element_text(hjust = 0.5, face = "bold"))
if (!is.null(purity)) {
expected_vafs <- .expectedClVAF(CN = as.numeric(cn), purity = purity)
p_clonality <- p_clonality + geom_vline(xintercept = expected_vafs, linetype = "dashed", color = "black")
}
clonality_plots[[paste0(cn, "_", b)]] <- p_clonality
}
}
for (cn in names(snvClonality_split_TCN)) {
snvClonality_split_TCN_B <- split(snvClonality_split_TCN[[cn]], snvClonality_split_TCN[[cn]]$B)
for (b in names(snvClonality_split_TCN_B)) {
tcn <- snvClonality_split_TCN_B[[b]]
tcn$Clonality <- factor(tcn$Clonality, levels = c("Precnv", "Postcnv", "C", "SC"))
if (nrow(tcn) == 0) next
max_count <- max(hist(tcn$t_vaf, breaks = nb.breaks, plot = FALSE)$counts)
p_clonality <- ggplot(tcn, aes(x = t_vaf, fill = Clonality)) +
geom_histogram(bins = nb.breaks, color = NA, position = "stack", show.legend = T) +
scale_fill_manual(values = clonality_colors, labels = c("Precnv" = "Clonal\n- Pre-CNV", "Postcnv" = "Clonal\n- Post-CNV", "C" = "Clonal\n- NOS", "SC" = "Subclonal")) +
scale_x_continuous(breaks = seq(0, 1, 0.2), limits = c(0, 1)) +
labs(x = "VAF", y = "No. of SNVs", title = paste0("CN:", cn, " (", as.numeric(cn) - as.numeric(b), ":", b, ")")) +
theme_classic() #+ theme(legend.position = "none")
# theme(legend.text = element_text(size = 8), legend.title = element_text(size = 9), plot.title = element_text(hjust = 0.5, face = "bold"))
if (!is.null(purity)) {
expected_vafs <- LACHESIS:::.expectedClVAF(CN = as.numeric(cn), purity = purity)
p_clonality <- p_clonality + geom_vline(xintercept = expected_vafs, linetype = "dashed", color = "black")
}
clonality_plots[[paste0(cn, "_", b)]] <- p_clonality
}
}
clonality_plots[[1]]
for (cn in names(snvClonality_split_TCN)) {
snvClonality_split_TCN_B <- split(snvClonality_split_TCN[[cn]], snvClonality_split_TCN[[cn]]$B)
for (b in names(snvClonality_split_TCN_B)) {
tcn <- snvClonality_split_TCN_B[[b]]
tcn$Clonality <- factor(tcn$Clonality, levels = c("Precnv", "Postcnv", "C", "SC"))
if (nrow(tcn) == 0) next
max_count <- max(hist(tcn$t_vaf, breaks = nb.breaks, plot = FALSE)$counts)
p_clonality <- ggplot(tcn, aes(x = t_vaf, fill = Clonality)) +
geom_histogram(bins = nb.breaks, color = NA, position = "stack", show.legend = T) +
scale_fill_manual(values = clonality_colors, labels = c("Precnv" = "Clonal\n- Pre-CNV", "Postcnv" = "Clonal\n- Post-CNV", "C" = "Clonal\n- NOS", "SC" = "Subclonal"), drop = F) +
scale_x_continuous(breaks = seq(0, 1, 0.2), limits = c(0, 1)) +
labs(x = "VAF", y = "No. of SNVs", title = paste0("CN:", cn, " (", as.numeric(cn) - as.numeric(b), ":", b, ")")) +
theme_classic() #+ theme(legend.position = "none")
# theme(legend.text = element_text(size = 8), legend.title = element_text(size = 9), plot.title = element_text(hjust = 0.5, face = "bold"))
if (!is.null(purity)) {
expected_vafs <- LACHESIS:::.expectedClVAF(CN = as.numeric(cn), purity = purity)
p_clonality <- p_clonality + geom_vline(xintercept = expected_vafs, linetype = "dashed", color = "black")
}
clonality_plots[[paste0(cn, "_", b)]] <- p_clonality
}
}
clonality_plots[[1]]
# Copy number plot and clonality histograms
clonality_plot <- do.call(.grid_arrange_shared_legend, c(clonality_plots, ncol = 2, nrow = ceiling(length(clonality_plot)/2)))
ceiling(length(clonality_plot)/2)
# Copy number plot and clonality histograms
clonality_plot <- do.call(.grid_arrange_shared_legend, c(clonality_plots, ncol = 2, nrow = ceiling(length(clonality_plots)/2)))
first_page <- gridExtra::arrangeGrob(cnv_plot, clonality_plot, clonality_plots_legend, ncol = 1, heights = c(0.4, 0.5, 0.1))
install.packages("../LACHESIS/", type = "source", repos = NULL)
library(LACHESIS)
snvs <- system.file("extdata", "NBE15", "snvs_NBE15_somatic_snvs_conf_8_to_10.vcf", package = "LACHESIS")
s_data <- readVCF(vcf = snvs, vcf.source = "dkfz")
aceseq_cn <- system.file("extdata", "NBE15", "NBE15_comb_pro_extra2.51_1.txt", package = "LACHESIS")
c_data <- readCNV(aceseq_cn)
sig.filepath <- system.file("extdata", "NBE15_Decomposed_MutationType_Probabilities.txt", package = "LACHESIS")
nb <- nbImport(cnv = c_data, snv = s_data, purity = 1, ploidy = 2.51, sig.assign = TRUE, ID = "NBE15", sig.file = sig.filepath)
cl_muts <- clonalMutationCounter(nb)
norm_muts <- normalizeCounts(cl_muts)
mrca <- MRCA(norm_muts)
clonality = estimateClonality(nbObj = nb, mrcaObj = mrca, ID = "NBE15", purity = 1)
clonality
plotNB(nb, snvClonality = clonality)
plotNB
estimateClonality
plotClonality
install.packages("../LACHESIS/", type = "source", repos = NULL)
library(LACHESIS)
snvs <- system.file("extdata", "NBE15", "snvs_NBE15_somatic_snvs_conf_8_to_10.vcf", package = "LACHESIS")
s_data <- readVCF(vcf = snvs, vcf.source = "dkfz")
aceseq_cn <- system.file("extdata", "NBE15", "NBE15_comb_pro_extra2.51_1.txt", package = "LACHESIS")
c_data <- readCNV(aceseq_cn)
nb <- nbImport(cnv = c_data, snv = s_data, purity = 1, ploidy = 2.51)
cl_muts <- clonalMutationCounter(nb)
norm_muts <- normalizeCounts(cl_muts)
mrca <- MRCA(norm_muts)
clonality = estimateClonality(nbObj = nb, mrcaObj = mrca, ID = "NBE15", purity = 1)
plotNB(nb, clonality)
10^2
sapply(c(1,3,5), function(x){print(x)})
vapply(c(1,3,5), function(x){print(x)})
?vapply
vapply(c(1,3,5), function(x){print(x)}, c(1,2,3))
vapply(c(1,3,5), function(x){print(x)}, c())
vapply(c(1,3,5), function(x){print(x)}, c(1))
vapply(c(1,3,5), function(x){print(x)}, numeric(1))
vapply(c(1,3,5), function(x){print(x)}, numeric(2))
vapply(c(1,3,5), function(x){print(x)
c(x, x+1)}, numeric(2))
unlist(vapply(c(1, 2, 1), function(x){
purity <- 0.5
x*purity/(purity*(A + B) + (1-purity)*2)
}, numeric(1)))
unlist(vapply(c(1, A, B), function(x){
purity <- 0.5
x*purity/(purity*(A + B) + (1-purity)*2)
}, numeric(1)))
A = 1
B = 2
unlist(vapply(c(1, A, B), function(x){
purity <- 0.5
x*purity/(purity*(A + B) + (1-purity)*2)
}, numeric(1)))
install.packages("../LACHESIS", repos = NULL, type = "source")
seq_along(1, 22)
?seq_along
seq_len(22)
library(LACHESIS)
clonalMutationCounter
detach("package:LACHESIS", unload = TRUE)
install.packages("../LACHESIS", repos = NULL, type = "source")
library(LACHESIS)
clonalMutationCounter
snvs <- system.file("extdata", "NBE15", "snvs_NBE15_somatic_snvs_conf_8_to_10.vcf", package = "LACHESIS")
s_data <- readVCF(vcf = snvs, vcf.source = "dkfz")
aceseq_cn <- system.file("extdata", "NBE15", "NBE15_comb_pro_extra2.51_1.txt", package = "LACHESIS")
c_data <- readCNV(aceseq_cn)
nb <- nbImport(cnv = c_data, snv = s_data, purity = 1, ploidy = 2.51)
cl_muts <- clonalMutationCounter(nb)
cl_muts
seq_along(3)
seq_len(3)
detach("package:LACHESIS", unload = TRUE)
install.packages("../LACHESIS", repos = NULL, type = "source")
library(LACHESIS)
detach("package:LACHESIS", unload = TRUE)
install.packages("../LACHESIS", repos = NULL, type = "source")
library(LACHESIS)
input.files = system.file("extdata", "Sample_template.txt", package = "LACHESIS")
input.files = data.table::fread(input.files)
#'
#' # cnv and snv files for example tumors
nbe11 = list.files(system.file("extdata/NBE11/", package = "LACHESIS"), full.names = TRUE)
nbe15 = list.files(system.file("extdata/NBE15/", package = "LACHESIS"), full.names = TRUE)
nbe63 = list.files(system.file("extdata/NBE63/", package = "LACHESIS"), full.names = TRUE)
#'
cnv.file = c(nbe11[1], nbe15[1], nbe63[1])
snv.file = c(nbe11[2], nbe15[2], nbe63[2])
#'
input.files$cnv.file = cnv.file
input.files$snv.file = snv.file
#'
# Make an example input file with paths to cnv and snv file along with other meta data
lachesis_input = tempfile(pattern = "lachesis", tmpdir = tempdir(), fileext = ".tsv")
data.table::fwrite(x = input.files, file = lachesis_input, sep = "\t")
#'
#' # Example with template file with paths to multiple cnv/snv files as an input
lachesis <- LACHESIS(input.files = lachesis_input)
snvs <- system.file("extdata", "NBE15", "snvs_NBE15_somatic_snvs_conf_8_to_10.vcf", package = "LACHESIS")
s_data <- readVCF(vcf = snvs, vcf.source = "dkfz")
aceseq_cn <- system.file("extdata", "NBE15", "NBE15_comb_pro_extra2.51_1.txt", package = "LACHESIS")
c_data <- readCNV(aceseq_cn)
nb <- nbImport(cnv = c_data, snv = s_data, purity = 1, ploidy = 2.51) cl_muts <- clonalMutationCounter(nb)
normOb + norm_muts
normObj = norm_muts
workObj <- normObj[Seglength > min.seg.size & ! chrom %in% excl.chr, ]
min.seg.size = 10^7
excl.chr = NULL
workObj <- normObj[Seglength > min.seg.size & ! chrom %in% excl.chr, ]
message("Computing mutation density at MRCA...")
# mean mutation density (SNVs/Mb)
tot.muts.mrca <- workObj[,sum(n_mut_total_clonal)]
tot.seglength.mrca <- workObj[,sum(Seglength)]
mutation.time.mrca <- tot.muts.mrca/tot.seglength.mrca*(1 - fp.mean)*10^6
bootstrapped.mrca.time <- sapply(seq_len(1000), function(x){
res <- sample(x = 1:nrow(workObj), size = nrow(workObj), prob = workObj[,Seglength], replace=T)
res <- workObj[res, sum(n_mut_total_clonal)/sum(Seglength)]*10^6
res <- res - res*rnorm(n = 1, mean = fp.mean, sd = fp.sd)
})
fp.mean = 0
fp.sd = 0
bootstrapped.mrca.time <- sapply(seq_len(1000), function(x){
res <- sample(x = 1:nrow(workObj), size = nrow(workObj), prob = workObj[,Seglength], replace=T)
res <- workObj[res, sum(n_mut_total_clonal)/sum(Seglength)]*10^6
res <- res - res*rnorm(n = 1, mean = fp.mean, sd = fp.sd)
})
bootstrapped.mrca.time
bootstrapped.mrca.time <- sapply(seq_len(1000), function(x){
res <- sample(x = 1:nrow(workObj), size = nrow(workObj), prob = workObj[,Seglength], replace=T)
res <- workObj[res, sum(n_mut_total_clonal)/sum(Seglength)]*10^6
res <- res - res*rnorm(n = 1, mean = fp.mean, sd = fp.sd)
print(res)
res
})
bootstrapped.mrca.time <- vapply(seq_len(1000), function(x){
res <- sample(x = 1:nrow(workObj), size = nrow(workObj), prob = workObj[,Seglength], replace=T)
res <- workObj[res, sum(n_mut_total_clonal)/sum(Seglength)]*10^6
res <- res - res*rnorm(n = 1, mean = fp.mean, sd = fp.sd)
res
}, numeric(1))
bootstrapped.mrca.time
seq_len(nrow(workObj))
detach("package:LACHESIS", unload = TRUE)
rm(list=ls())
install.packages("../LACHESIS", repos = NULL, type = "source")
library(LACHESIS)
detach("package:LACHESIS", unload = TRUE)
install.packages("../LACHESIS", repos = NULL, type = "source")
library(LACHESIS)
snvs <- system.file("extdata", "NBE15", "snvs_NBE15_somatic_snvs_conf_8_to_10.vcf", package = "LACHESIS")
s_data <- readVCF(vcf = snvs, vcf.source = "dkfz")
aceseq_cn <- system.file("extdata", "NBE15", "NBE15_comb_pro_extra2.51_1.txt", package = "LACHESIS")
c_data <- readCNV(aceseq_cn)
nb <- nbImport(cnv = c_data, snv = s_data, purity = 1, ploidy = 2.51)
cl_muts <- clonalMutationCounter(nb)
norm_muts <- normalizeCounts(cl_muts)
mrca <- MRCA(norm_muts)
seq_len(22)
seq_along(1, 24)
?seq_along
seq_along(24)
detach("package:LACHESIS", unload = TRUE)
install.packages("../LACHESIS", repos = NULL, type = "source")
library(LACHESIS)
detach("package:LACHESIS", unload = TRUE)
install.packages("../LACHESIS", repos = NULL, type = "source")
library(LACHESIS)
snvs <- system.file("extdata", "NBE15", "snvs_NBE15_somatic_snvs_conf_8_to_10.vcf", package = "LACHESIS")
s_data <- readVCF(vcf = snvs, vcf.source = "dkfz")
aceseq_cn <- system.file("extdata", "NBE15", "NBE15_comb_pro_extra2.51_1.txt", package = "LACHESIS")
c_data <- readCNV(aceseq_cn)
nb <- nbImport(cnv = c_data, snv = s_data, purity = 1, ploidy = 2.51)
detach("package:LACHESIS", unload = TRUE)
install.packages("../LACHESIS", repos = NULL, type = "source")
library(LACHESIS)
detach("package:LACHESIS", unload = TRUE)
install.packages("../LACHESIS", repos = NULL, type = "source")
library(LACHESIS)
plotMutationDensities(mrca)
plotMutationDensities
.getCentromeres
LACHESIS:::.getCentromeres
detach("package:LACHESIS", unload = TRUE)
install.packages("../LACHESIS", repos = NULL, type = "source")
library(LACHESIS)
detach("package:LACHESIS", unload = TRUE)
install.packages("../LACHESIS", repos = NULL, type = "source")
library(LACHESIS)
dkfz_vcf = system.file("extdata", "NBE15", "snvs_NBE15_somatic_snvs_conf_8_to_10.vcf", package = "LACHESIS")
d_data = readVCF(vcf = dkfz_vcf, vcf.source = "dkfz")
Seglength <- . <- A <- B
A = 2
B = 3
Seglength <- . <- A <- B
Seglength <- . <- A <-
B
Seglength <- . <- A <-
B
Seqlength
A
B
.
Seglength
paste(c("A", "B"), sep=".")
paste(c("A", "B"), cat=".")
paste(c("A", "B"), collapse=".")
message("Please refer to ", c("A", "B"))
warning("No output directory specified.
LACHESIS output will be discarded.")
message("Please refer to ", toString(c("A", "B")))
2.85/6*1000
10/6*1000
5/6*1000
2/6*1000
0.5/8
0.5/16
0.5/32
1000/3.3
1000/3.3*0.05
test = c(5.7, 4.8, 6.3, 4.1, 4.4, 4.5, 4.8, 4.7, 4.1, 5.2, 6.2, 4.9, 4.5, 4.9, 5.1)
hist(test, breaks = 100)
var(teswt)
var(test)
(0.05*0.95)
(0.05*0.95*170)
(0.05*0.95*143)
(0.05*0.95*143)/length(test)
2/3.3
2/3.3*1000
2/6.6*1000
5/6.6*1000
seq_len(22)
warning(
"No sample name provided for samples ",
'3',
"; sample name was set to 1 - "
)
warning("No output directory specified.
LACHESIS output will be discarded.")
warning("No output directory specified.
LACHESIS output will be discarded.")
warning("No output directory specified. LACHESIS output will be
discarded.")
install.packages('../LACHESIS/', type = 'source', repos = NULL)
install.packages('../LACHESIS/', type = 'source', repos = NULL)
library(LACHESIS)
?LACHESIS
LACHESIS()
LACHESIS
roxygen2::roxygenise()
install.packages('../LACHESIS/', type = 'source', repos = NULL)
library(LACHESIS)
detach("LACHESIS")
detach(name = "LACHESIS")
detach(name =  "LACHESIS")
library(LACHESIS)
detach(name = "LACHESIS")
install.packages('../LACHESIS/', type = 'source', repos = NULL)
library(LACHESIS)
?LACHESIS
message("Filtering ", 3, " segments
below the minimal segment size and ",
)
message("Filtering ", 3, " segments
below the minimal segment size and ")
message("Filtering ", 3, " segments \n
below the minimal segment size and ")
message("Filtering ", 3, " segments \n
below the minimal segment size and ")
message("Filtering ", 3, " segments
below the minimal segment size and ")
message(cat("Filtering ", 3, " segments
below the minimal segment size and "))
tmp1 = 3
tmp2 = 4
rm(tmp1, tmp2)
warning(
"No SNV file provided for sample(s) ", 3, ";
sample(s) will be excluded"
)
warning("No SNV file provided for sample(s) ", 3, "; sample(s)
will be excluded"
)
warning("No SNV file provided for sample(s) ", 3, "; sample(s)
will be excluded"
)
tmp1 = 3
warning("No SNV file provided for sample(s) ", tmp1, "; sample(s)
will be excluded"
)
warning("No SNV file provided for sample(s) ", tmp1, "; sample(s)
will be excluded"
)
warning("No SNV file provided for sample(s) ", tmp1, "; sample(s)
will be excluded"
)
warning(sprintf("No SNV file provided for sample(s) ", tmp1, ";
sample(s) will be excluded"
))
warning(sprintf(
"No SNV file provided for sample(s) %s; sample(s) will be excluded",
tmp1
))
warning(sprintf(
"No SNV file provided for sample(s) %s;
sample(s) will be excluded",
tmp1
))
warning(sprintf("No SNV file provided for sample(s)  %s;
sample(s) will be excluded", tmp1
))
warning(sprintf(
"No SNV file provided for sample(s) %s; sample(s) will be excluded",
tmp1
))
warning("No output directory specified. LACHESIS output will be
discarded.")
warning("No output directory specified.
LACHESIS output will be discarded.")
sprintf(
"No sample name provided for samples %s;
sample name was set to 1 - %s", tmp1, tmp2
)
tmp2 = 3
sprintf(
"No sample name provided for samples %s;
sample name was set to 1 - %s", tmp1, tmp2
)
tmp2 = 4
sprintf(
"No sample name provided for samples %s;
sample name was set to 1 - %s", tmp1, tmp2
)
warning(sprintf(
"No sample name provided for samples %s;
sample name was set to 1 - %s", tmp1, tmp2
))
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
packageVersion('readVCF')
packageVersion('vcfR')
output.dir = "A"
x = data.frame(ID = "B")
ile.path(
output.dir, x$ID,
paste0(
"04_SNV_timing_per_segment_",
x$ID, ".txt"
)
)
file.path(
output.dir, x$ID,
paste0(
"04_SNV_timing_per_segment_",
x$ID, ".txt"
))
paste(output.dir, "SNV_densities_cohort.pdf",
sep = "/"
)
m_data <- readVCF(vcf = mutect_vcf, vcf.source = "mutect", filter.value = ".")
mutect_vcf <- system.file("extdata", "mutect.somatic.vcf.gz", package = "LACHESIS")
m_data <- readVCF(vcf = mutect_vcf, vcf.source = "mutect", filter.value = ".")
v <- vcfR::read.vcfR(file = mutect_vcf, verbose = FALSE)
vcfR::getFILTER(v)
plotClonality
install.packages("../LACHESIS", repos = NULL, type = "source")
install.packages("../LACHESIS", repos = NULL, type = "source")
library(LACHESIS)
detach("package:LACHESIS", unload = TRUE)
install.packages("../LACHESIS", repos = NULL, type = "source")
input.files <- system.file("extdata", "Sample_template.txt",
package = "LACHESIS"
)
input.files <- data.table::fread(input.files)
# cnv and snv files for example tumors
nbe11 <- list.files(system.file("extdata/NBE11/", package = "LACHESIS"),
full.names = TRUE
)
nbe15 <- list.files(system.file("extdata/NBE15/", package = "LACHESIS"),
full.names = TRUE
)
nbe63 <- list.files(system.file("extdata/NBE63/", package = "LACHESIS"),
full.names = TRUE
)
#'
cnv.file <- c(nbe11[1], nbe15[1], nbe63[1])
snv.file <- c(nbe11[2], nbe15[2], nbe63[2])
#'
input.files$cnv.file <- cnv.file
input.files$snv.file <- snv.file
#'
#' # Make an example input file with paths to cnv and snv file along with other
#' # meta data
lachesis_input <- tempfile(
pattern = "lachesis", tmpdir = tempdir(),
fileext = ".tsv"
)
data.table::fwrite(x = input.files, file = lachesis_input, sep = "\t")
#
#
# Example with template file with paths to multiple cnv/snv files as an input
lachesis <- LACHESIS(input.files = lachesis_input, filter.indels = F)
library(LACHESIS)
#
# Example with template file with paths to multiple cnv/snv files as an input
lachesis <- LACHESIS(input.files = lachesis_input, filter.indels = F)
