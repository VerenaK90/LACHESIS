stop("No variants passed filtering!")
}
message("Variants passing filter: ", nrow(v@fix))
if(filter.biallelic){
v <- v[vcfR::is.biallelic(x = v)] # Only keep biallelic variants
if (nrow(v) == 0) {
stop("No bi-allelic variants found!")
}
message("Bi-allelic variants    : ", nrow(v@fix))
}
if(filter.indels){
v <- v[!vcfR::is.indel(v)] # Remove INDELS (only SNVs)
if (nrow(v) == 0) {
stop("No single nucelotide variants found!")
}
message("single nucl. variants  : ", nrow(v@fix))
}
# convert vcf data to a data.frame
if ("FORMAT" %in% colnames(v@gt)) {
tum_format <- v@gt[, t.sample]
vcf_df <- as.data.frame(data.table::tstrsplit(tum_format, split = ":"))
colnames(vcf_df) <- unlist(data.table::tstrsplit(
x =
v@gt[1, "FORMAT"],
split = ":"
))
} else if ("INFO" %in% colnames(v@fix)) {
info_column <- vcfR::getINFO(v)
vcf_df <- as.data.frame(data.table::tstrsplit(info_column,
split = ";",
type.convert = TRUE
))
colnames(vcf_df) <- vapply(
vcf_df[1, ],
function(x) strsplit(x, "=")[[1]][1],
character(1)
)
vcf_df <- as.data.frame(lapply(vcf_df, function(col) {
vapply(
col, function(x) ifelse(grepl("=", x), sub(".*?=", "", x), NA),
character(1)
)
}), stringsAsFactors = FALSE)
} else {
stop("Please provide vcf file with FORMAT or INFO column.")
}
# Make a df of all necessary columns
dt <- data.table::data.table(
chrom = vcfR::getCHROM(v),
pos = vcfR::getPOS(v), ref = vcfR::getREF(v),
alt = vcfR::getALT(v)
)
dt <- cbind(dt, vcf_df)
# Parse FORMAT field and get vaf, etc
dt <- .get_depth_dt(d = dt, source = vcf.source)
}
vcf.source
x$vcf.source
input.files
input.files <- system.file("extdata", "Sample_template.txt",
package = "LACHESIS"
)
input.files <- data.table::fread(input.files)
# cnv and snv files for example tumors
nbe11 <- list.files(system.file("extdata/NBE11/", package = "LACHESIS"),
full.names = TRUE
)
nbe15 <- list.files(system.file("extdata/NBE15/", package = "LACHESIS"),
full.names = TRUE
)
nbe63 <- list.files(system.file("extdata/NBE63/", package = "LACHESIS"),
full.names = TRUE
)
#' m_data <- readVCF(vcf = mutect_vcf, vcf.source = "mutect", filter.value = ".")
nbe11[2] <- system.file("extdata", "mutect.somatic.vcf.gz", package = "LACHESIS")
#'
cnv.file <- c(nbe11[1], nbe15[1], nbe63[1])
snv.file <- c(nbe11[2], nbe15[2], nbe63[2])
#'
input.files$cnv.file <- cnv.file
input.files$snv.file <- snv.file
input.files
#'
#' # Make an example input file with paths to cnv and snv file along with other
#' # meta data
lachesis_input <- tempfile(
pattern = "lachesis", tmpdir = tempdir(),
fileext = ".tsv"
)
data.table::fwrite(x = input.files, file = lachesis_input, sep = "\t")
vcf.source = "mutect"
sample.specs <- data.table::fread(input.files,
sep = "\t",
stringsAsFactors = FALSE
)
input.files = lachesis_input
sample.specs <- data.table::fread(input.files,
sep = "\t",
stringsAsFactors = FALSE
)
any(is.na(sample.specs[, ID]))
any(is.na(sample.specs[, cnv.file]))
any(is.na(sample.specs[, snv.file]))
sample.specs.spl <- split(sample.specs, sample.specs$ID)
i
x <- sample.specs.spl[[i]]
if (is.null(x$ID)) {
stop("Please provide sample identifiers.")
}
if (is.null(x$vcf.source)) {
stop("Please provide vcf source.")
}
x
head(sample.specs)
head(input.files)
input.files <- system.file("extdata", "Sample_template.txt",
package = "LACHESIS"
)
input.files <- data.table::fread(input.files)
# cnv and snv files for example tumors
nbe11 <- list.files(system.file("extdata/NBE11/", package = "LACHESIS"),
full.names = TRUE
)
nbe15 <- list.files(system.file("extdata/NBE15/", package = "LACHESIS"),
full.names = TRUE
)
nbe63 <- list.files(system.file("extdata/NBE63/", package = "LACHESIS"),
full.names = TRUE
)
#' m_data <- readVCF(vcf = mutect_vcf, vcf.source = "mutect", filter.value = ".")
nbe11[2] <- system.file("extdata", "mutect.somatic.vcf.gz", package = "LACHESIS")
#'
cnv.file <- c(nbe11[1], nbe15[1], nbe63[1])
snv.file <- c(nbe11[2], nbe15[2], nbe63[2])
#'
input.files$cnv.file <- cnv.file
input.files$snv.file <- snv.file
#'
#' # Make an example input file with paths to cnv and snv file along with other
#' # meta data
lachesis_input <- tempfile(
pattern = "lachesis", tmpdir = tempdir(),
fileext = ".tsv"
)
head(input.files)
input.files$vcf.source[1] = "mutect"
data.table::fwrite(x = input.files, file = lachesis_input, sep = "\t")
#
# Example with template file with paths to multiple cnv/snv files as an input
lachesis <- LACHESIS(input.files = lachesis_input, filter.indels = F, vcf.source = "mutect")
sample.specs <- data.table::fread(input.files,
sep = "\t",
stringsAsFactors = FALSE
)
input.files <- lachesis_input
sample.specs <- data.table::fread(input.files,
sep = "\t",
stringsAsFactors = FALSE
)
sample.specs.spl <- split(sample.specs, sample.specs$ID)
i
x <- sample.specs.spl[[i]]
snv <- readVCF(
vcf = x$snv.file, vcf.source = x$vcf.source,
t.sample = x$vcf.tumor.id, min.depth = min.depth,
min.vaf = min.vaf, info.af = vcf.info.af, ignore.XY = ignore.XY,
info.dp = vcf.info.dp, filter.value = filter.value
)
ignore.XY = F
snv <- readVCF(
vcf = x$snv.file, vcf.source = x$vcf.source,
t.sample = x$vcf.tumor.id, min.depth = min.depth,
min.vaf = min.vaf, info.af = vcf.info.af, ignore.XY = ignore.XY,
info.dp = vcf.info.dp, filter.value = filter.value
)
rm(list=ls())
detach("package:LACHESIS", unload = TRUE)
install.packages("../LACHESIS", type = "source", repos = NULL)
library(LACHESIS)
input.files <- system.file("extdata", "Sample_template.txt",
package = "LACHESIS"
)
input.files <- data.table::fread(input.files)
# cnv and snv files for example tumors
nbe11 <- list.files(system.file("extdata/NBE11/", package = "LACHESIS"),
full.names = TRUE
)
nbe15 <- list.files(system.file("extdata/NBE15/", package = "LACHESIS"),
full.names = TRUE
)
nbe63 <- list.files(system.file("extdata/NBE63/", package = "LACHESIS"),
full.names = TRUE
)
#' m_data <- readVCF(vcf = mutect_vcf, vcf.source = "mutect", filter.value = ".")
nbe11[2] <- system.file("extdata", "mutect.somatic.vcf.gz", package = "LACHESIS")
#'
cnv.file <- c(nbe11[1], nbe15[1], nbe63[1])
snv.file <- c(nbe11[2], nbe15[2], nbe63[2])
#'
input.files$cnv.file <- cnv.file
input.files$snv.file <- snv.file
#'
#' # Make an example input file with paths to cnv and snv file along with other
#' # meta data
lachesis_input <- tempfile(
pattern = "lachesis", tmpdir = tempdir(),
fileext = ".tsv"
)
input.files$vcf.source[1] = "mutect"
data.table::fwrite(x = input.files, file = lachesis_input, sep = "\t")
#
# Example with template file with paths to multiple cnv/snv files as an input
lachesis <- LACHESIS(input.files = lachesis_input, filter.indels = F, vcf.source = "mutect")
#
# Example with template file with paths to multiple cnv/snv files as an input
lachesis <- LACHESIS(input.files = lachesis_input, filter.biallelic = F, vcf.source = "mutect")
#
# Example with template file with paths to multiple cnv/snv files as an input
lachesis <- LACHESIS(input.files = lachesis_input, filter.biallelic = T, vcf.source = "mutect")
lachesis_input
input.files <- system.file("extdata", "Sample_template.txt",
package = "LACHESIS"
)
input.files <- data.table::fread(input.files)
# cnv and snv files for example tumors
nbe11 <- list.files(system.file("extdata/NBE11/", package = "LACHESIS"),
full.names = TRUE
)
nbe15 <- list.files(system.file("extdata/NBE15/", package = "LACHESIS"),
full.names = TRUE
)
nbe63 <- list.files(system.file("extdata/NBE63/", package = "LACHESIS"),
full.names = TRUE
)
#' m_data <- readVCF(vcf = mutect_vcf, vcf.source = "mutect", filter.value = ".")
nbe11[2] <- system.file("extdata", "mutect.somatic.vcf.gz", package = "LACHESIS")
#'
cnv.file <- c(nbe11[1], nbe15[1], nbe63[1])
snv.file <- c(nbe11[2], nbe15[2], nbe63[2])
#'
input.files$cnv.file <- cnv.file
input.files$snv.file <- snv.file
input.files
input.files <- system.file("extdata", "Sample_template.txt",
package = "LACHESIS"
)
input.files <- data.table::fread(input.files)
# cnv and snv files for example tumors
nbe11 <- list.files(system.file("extdata/NBE11/", package = "LACHESIS"),
full.names = TRUE
)
nbe15 <- list.files(system.file("extdata/NBE15/", package = "LACHESIS"),
full.names = TRUE
)
nbe63 <- list.files(system.file("extdata/NBE63/", package = "LACHESIS"),
full.names = TRUE
)
#' m_data <- readVCF(vcf = mutect_vcf, vcf.source = "mutect", filter.value = ".")
nbe15[2] <- system.file("extdata", "mutect.somatic.vcf.gz", package = "LACHESIS")
#'
cnv.file <- c(nbe11[1], nbe15[1], nbe63[1])
snv.file <- c(nbe11[2], nbe15[2], nbe63[2])
#'
input.files$cnv.file <- cnv.file
input.files$snv.file <- snv.file
#'
#' # Make an example input file with paths to cnv and snv file along with other
#' # meta data
lachesis_input <- tempfile(
pattern = "lachesis", tmpdir = tempdir(),
fileext = ".tsv"
)
input.files$vcf.source[1] = "mutect"
data.table::fwrite(x = input.files, file = lachesis_input, sep = "\t")
#
# Example with template file with paths to multiple cnv/snv files as an input
lachesis <- LACHESIS(input.files = lachesis_input, filter.biallelic = F, vcf.source = "mutect")
input.files <- system.file("extdata", "Sample_template.txt",
package = "LACHESIS"
)
input.files <- data.table::fread(input.files)
# cnv and snv files for example tumors
nbe11 <- list.files(system.file("extdata/NBE11/", package = "LACHESIS"),
full.names = TRUE
)
nbe15 <- list.files(system.file("extdata/NBE15/", package = "LACHESIS"),
full.names = TRUE
)
nbe63 <- list.files(system.file("extdata/NBE63/", package = "LACHESIS"),
full.names = TRUE
)
#'
cnv.file <- c(nbe11[1], nbe15[1], nbe63[1])
snv.file <- c(nbe11[2], nbe15[2], nbe63[2])
#'
input.files$cnv.file <- cnv.file
input.files$snv.file <- snv.file
#'
#' # Make an example input file with paths to cnv and snv file along with other
#' # meta data
lachesis_input <- tempfile(
pattern = "lachesis", tmpdir = tempdir(),
fileext = ".tsv"
)
data.table::fwrite(x = input.files, file = lachesis_input, sep = "\t")
#
# Example with template file with paths to multiple cnv/snv files as an input
lachesis <- LACHESIS(input.files = lachesis_input, filter.biallelic = F, vcf.source = "mutect")
input.files <- system.file("extdata", "Sample_template.txt",
package = "LACHESIS"
)
input.files <- data.table::fread(input.files)
# cnv and snv files for example tumors
nbe11 <- list.files(system.file("extdata/NBE11/", package = "LACHESIS"),
full.names = TRUE
)
nbe15 <- list.files(system.file("extdata/NBE15/", package = "LACHESIS"),
full.names = TRUE
)
nbe63 <- list.files(system.file("extdata/NBE63/", package = "LACHESIS"),
full.names = TRUE
)
#' m_data <- readVCF(vcf = mutect_vcf, vcf.source = "mutect", filter.value = ".")
nbe15[2] <- system.file("extdata", "mutect.somatic.vcf.gz", package = "LACHESIS")
#'
cnv.file <- c(nbe11[1], nbe15[1], nbe63[1])
snv.file <- c(nbe11[2], nbe15[2], nbe63[2])
#'
input.files$cnv.file <- cnv.file
input.files$snv.file <- snv.file
#'
#' # Make an example input file with paths to cnv and snv file along with other
#' # meta data
lachesis_input <- tempfile(
pattern = "lachesis", tmpdir = tempdir(),
fileext = ".tsv"
)
input.files$vcf.source[1] = "mutect"
data.table::fwrite(x = input.files, file = lachesis_input, sep = "\t")
#
input.files = lachesis_input
input.files <- system.file("extdata", "Sample_template.txt",
package = "LACHESIS"
)
input.files <- data.table::fread(input.files)
# cnv and snv files for example tumors
nbe11 <- list.files(system.file("extdata/NBE11/", package = "LACHESIS"),
full.names = TRUE
)
nbe15 <- list.files(system.file("extdata/NBE15/", package = "LACHESIS"),
full.names = TRUE
)
nbe63 <- list.files(system.file("extdata/NBE63/", package = "LACHESIS"),
full.names = TRUE
)
#' m_data <- readVCF(vcf = mutect_vcf, vcf.source = "mutect", filter.value = ".")
nbe15[2] <- system.file("extdata", "mutect.somatic.vcf.gz", package = "LACHESIS")
#'
cnv.file <- c(nbe11[1], nbe15[1], nbe63[1])
snv.file <- c(nbe11[2], nbe15[2], nbe63[2])
#'
input.files$cnv.file <- cnv.file
input.files$snv.file <- snv.file
#'
#' # Make an example input file with paths to cnv and snv file along with other
#' # meta data
lachesis_input <- tempfile(
pattern = "lachesis", tmpdir = tempdir(),
fileext = ".tsv"
)
input.files$vcf.source[2] = "mutect"
data.table::fwrite(x = input.files, file = lachesis_input, sep = "\t")
#
# Example with template file with paths to multiple cnv/snv files as an input
lachesis <- LACHESIS(input.files = lachesis_input, filter.biallelic = F, vcf.source = "mutect")
input.files = lachesis_input
filter.biallelic = F
incl.chr <- setdiff(seq_len(22), NULL)
sample.specs <- data.table::fread(input.files,
sep = "\t",
stringsAsFactors = FALSE
)
if (any(is.na(sample.specs[, ID]))) {
tmp1 <- sample.specs[, which(is.na(ID))]
tmp2 <- sample.specs[, sum(is.na(ID))]
warning(
"No sample name provided for samples ", tmp1, ";
sample name was set to 1 - ", tmp2
)
rm(tmp1, tmp2)
sample.specs[, ID := as.character(ID)][
is.na(ID),
ID := which(is.na(ID))
]
}
if (any(is.na(sample.specs[, cnv.file]))) {
tmp1 <- toString(sample.specs[, ID[which(is.na(cnv.file))]])
warning(
"No CNV file provided for sample(s) ", tmp1, ";
sample(s) will be excluded"
)
rm(tmp1)
sample.specs[!is.na(cnv.file), ]
if (nrow(sample.specs) == 0) {
stop("No files retained! Stopping analysis.")
}
}
if (any(is.na(sample.specs[, snv.file]))) {
tmp1 <- toString(sample.specs[, ID[which(is.na(snv.file))]])
warning(sprintf(
"No SNV file provided for sample(s) %s; sample(s) will be excluded",
tmp1
))
rm(tmp1)
sample.specs[!is.na(snv.file), ]
if (nrow(sample.specs) == 0) {
stop("No files retained! Stopping analysis.")
}
}
sample.specs.spl <- split(sample.specs, sample.specs$ID)
i = 2
x <- sample.specs.spl[[i]]
if (is.null(x$ID)) {
stop("Please provide sample identifiers.")
}
if (is.null(x$vcf.source)) {
stop("Please provide vcf source.")
}
if (is.null(x$vcf.tumor.ids)) {
x$vcf.tumor.ids <- x$ID
} else if (any(is.na(x$vcf.tumor.ids))) {
tmp1 <- which(is.na(x$vcf.tumor.ids))
warning(sprintf(
"No column ID provided for sample %s; will be inferred.",
tmp1
))
x$vcf.tumor.ids[is.na(x$vcf.tumor.ids)] <- x$id[
is.na(x$vcf.tumor.ids)
]
}
message("Computing SNV density for sample ", x$ID)
if (!is.null(output.dir)) {
dir.create(paste(output.dir, x$ID, sep = "/"),
recursive = TRUE,
showWarnings = FALSE
) # Create per-sample output directory
} else {
warning("No output directory specified.
LACHESIS output will be discarded.")
}
cnv <- readCNV(
cn.info = x$cnv.file, chr.col = x$cnv.chr.col,
start.col = x$cnv.start.col, end.col = x$cnv.end.col,
A.col = x$cnv.A.col, B.col = x$cnv.B.col,
tcn.col = x$cnv.tcn.col, tumor.id = x$ID,
merge.tolerance = merge.tolerance,
max.cn = max.cn, ignore.XY = ignore.XY
)
cnv <- readCNV(
cn.info = x$cnv.file, chr.col = x$cnv.chr.col,
start.col = x$cnv.start.col, end.col = x$cnv.end.col,
A.col = x$cnv.A.col, B.col = x$cnv.B.col,
tcn.col = x$cnv.tcn.col, tumor.id = x$ID,
merge.tolerance = 10^5,
max.cn = 4, ignore.XY = T
)
snv <- readVCF(
vcf = x$snv.file, vcf.source = x$vcf.source,
t.sample = x$vcf.tumor.id, min.depth = min.depth,
min.vaf = min.vaf, info.af = vcf.info.af, ignore.XY = ignore.XY,
info.dp = vcf.info.dp, filter.value = filter.value, ...
)
snv <- readVCF(
vcf = x$snv.file, vcf.source = x$vcf.source,
t.sample = x$vcf.tumor.id, min.depth = 0,
min.vaf = 0, info.af = "AF", ignore.XY = T,
info.dp = "DP", filter.value = ".")
nb <- nbImport(
cnv = cnv, snv = snv, purity = x$purity, ploidy = x$ploidy,
sig.assign = sig.assign, assign.method = assign.method,
ID = x$ID, sig.file = sig.file, sig.select = sig.select,
min.p = min.p, ref.build = ref.build, seed = seed
)
nb <- nbImport(
cnv = cnv, snv = snv, purity = x$purity, ploidy = x$ploidy,
sig.assign = sig.assign, assign.method = assign.method,
ID = x$ID, sig.file = sig.file, sig.select = sig.select,
min.p = min.p, ref.build = ref.build, seed = 134
)
nb <- nbImport(
cnv = cnv, snv = snv, purity = x$purity, ploidy = x$ploidy,
sig.assign = F, assign.method = assign.method,
ID = x$ID, sig.file = sig.file, sig.select = sig.select,
min.p = min.p, ref.build = ref.build, seed = 134
)
raw.counts <- clonalMutationCounter(
nbObj = nb, min.cn = min.cn,
max.cn = max.cn, chromosomes = incl.chr
)
raw.counts <- clonalMutationCounter(
nbObj = nb, min.cn = min.cn,
max.cn = 4, chromosomes = incl.chr
)
raw.counts <- clonalMutationCounter(
nbObj = nb, min.cn = 1,
max.cn = 4, chromosomes = incl.chr
)
#
# Example with template file with paths to multiple cnv/snv files as an input
lachesis <- LACHESIS(input.files = lachesis_input, filter.biallelic = F, filter.value = ".",
vcf.source = "mutect")
roxygen2::roxygenise()
